import streamlit as st
import requests
import pandas as pd
from datetime import datetime
import base64
from io import BytesIO

BACKEND_URL = "http://localhost:8000"
API_URL = "http://localhost:8000"


st.set_page_config(page_title="–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", layout="wide")
st.title("üìç –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ x, y, z –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.")

# –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
try:
    response = requests.get(f"{BACKEND_URL}/systems")
    if response.status_code == 200:
        systems = response.json().get("systems", [])
    else:
        st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
        systems = ["–°–ö-42", "–ü–ó-90.11"]  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
except Exception as e:
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã: {e}")
    systems = ["–°–ö-42", "–ü–ó-90.11"]  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

col1, col2 = st.columns(2)
with col1:
    initial_system = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É", systems)
with col2:
    target_system = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É", systems)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file is not None:
    try:
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_excel(uploaded_file)
        st.write("üì• –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
        st.dataframe(df.head())

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"):
            files = {
            "file": (uploaded_file.name, uploaded_file.getvalue(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            }
            data = {
                "sk1": initial_system,
                "sk2": target_system
                }
            response = requests.post(
            f"{BACKEND_URL}/transform",
            files=files,
            data=data
            )

            if response.status_code == 200:
                result = response.json()
                if result.get("status") == "success":
                    st.success("‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    excel_data = base64.b64decode(result["data"])
                    transformed_df = pd.read_excel(BytesIO(excel_data))
                    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
                    st.dataframe(transformed_df)
                    
                    # –û—Ç—á–µ—Ç
                    st.subheader("üìÑ Markdown –æ—Ç—á–µ—Ç")
                    st.markdown(result["report"])
                    
                    # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    output_filename = f"transformed_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Excel)",
                        data=excel_data,
                        file_name=output_filename,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    
                    report_filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (Markdown)",
                        data=result["report"],
                        file_name=report_filename,
                        mime="text/markdown"
                    )
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")