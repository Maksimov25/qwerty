import streamlit as st
import requests
import pandas as pd
from datetime import datetime
import base64
from io import BytesIO


BACKEND_URL = "http://localhost:8000"

st.title("üìç –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ x, y, z –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.")

# –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
try:
    response = requests.get(f"{BACKEND_URL}/systems")
    systems = response.json().get("systems", [])
except Exception as e:
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã: {e}")
    systems = ["–°–ö-42", "–ü–ó-90.11"]  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

col1, col2 = st.columns(2)
with col1:
    initial_system = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É", systems)
with col2:
    target_system = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É", systems)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file is not None:
    try:
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_excel(uploaded_file)
        st.write("üì• –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
        st.dataframe(df.head())

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"):
            files = {
                "file": (uploaded_file.name, uploaded_file.getvalue(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            url = f"{BACKEND_URL}/transform?sk1={initial_system}&sk2={target_system}"
            response = requests.post(url, files=files)

            if response.status_code == 200 and response.json()["status"] == "success":
                result = response.json()
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.success("‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ —á–∏—Ç–∞–µ–º Excel-—Ñ–∞–π–ª
                excel_data = base64.b64decode(result["data"])
                transformed_df = pd.read_excel(BytesIO(excel_data))
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
                st.dataframe(transformed_df)
                # –û—Ç—á–µ—Ç
                st.subheader("üìÑ Markdown –æ—Ç—á–µ—Ç")
                st.markdown(result["report"])
                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                transformed_df.to_excel("output.xlsx", index=False)
                with open("output.xlsx", "rb") as f:
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Excel)",
                        data=f,
                        file_name=f"transformed_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                with open("report.md", "w", encoding="utf-8") as f:
                    f.write(result["report"])
                with open("report.md", "rb") as f:
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (Markdown)",
                        data=f,
                        file_name=f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                        mime="text/markdown"
                    )
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")